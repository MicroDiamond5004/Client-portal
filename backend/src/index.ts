import express from 'express';
import webpush from 'web-push';
import bodyParser from 'body-parser';
import cors from 'cors';
import { ELMATicket, MessageType, UserData } from './data/types';
import { getUserSubscriptions, loadUserData, saveUserData, saveUserSubscription } from './data/storage';
import path from 'path';
import { readdirSync } from 'fs';
import fs from 'fs';
import axios from 'axios';
import { error } from 'console';

// üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VAPID-–∫–ª—é—á–µ–π
const VAPID_KEYS = {
  publicKey: 'BIyUd7eREfLOnyukFMR9DuezE8uXAnOwp_-Rr7YxIX-RIxm2IRW6uJ90vB1OBn51o0rGAf8k4SQGR-ZfuutHmiE',
  privateKey: 'WM4lBtcHCBrKFaiZiOLF39NbMjML-H3VaDNXkCQBFmg', // üëà –ù–ï –≤—ã–∫–ª–∞–¥—ã–≤–∞–π —ç—Ç–æ—Ç –∫–ª—é—á –Ω–∞ –∫–ª–∏–µ–Ω—Ç!
};

webpush.setVapidDetails(
  'mailto:test@example.com',
  VAPID_KEYS.publicKey,
  VAPID_KEYS.privateKey
);

const app = express();
app.use(cors());
app.use(bodyParser.json());

const token = 'Bearer eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55IjoiaGVhZCIsInVzZXJJZCI6IjU0M2U4MjBjLWU4MzYtNDVmMC1iMTc3LTA1N2E1ODQ0NjNiNyIsIm93bmVyIjpmYWxzZSwiaXNQb3J0YWwiOmZhbHNlLCJzZXNzaW9uSWQiOiIyODY5ZTAyZC1kNDM0LTVlOWQtYWEyOS04MmM3ODBmNGY3YzgiLCJwcml2aWxlZ2VzIjpbInN5c3RlbSIsImFkbWluaXN0cmF0aW9uIl0sIm5lZWRDaGFuZ2VQYXNzd29yZCI6ZmFsc2UsImNyZWF0ZWRBdCI6MTc0NDg0NjY0OSwiaXNzIjoiYXBpIiwiZXhwIjoxNzQ3MjcwMDc0LCJpYXQiOjE3NDQ4NTA3NTR9.GL4lodxftYl0FVabU9SdzwCaciNvc6iMZgkRXSxxdhLPScwa_CwiRknEKYPaNbZeHFUkJ0Kz2TMP8fEBPLxEC-pJ4d0_hK6sINQYQkg_NPp1EamEatu1HQbGXNOm2OAGDy0YAsNZxhYhtnOi6FBq4hPB4pinA8Hr7ML_zXF0A4U';

// üéØ –†–æ—É—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.post('/api/send-notification', async (req, res) => {
  const { subscription, message, title } = req.body;

  const payload = JSON.stringify({
    title: title || 'üöÄ Push –∏–∑ backend!',
    body: message || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏',
  });

  try {
    console.log(subscription);
    await webpush.sendNotification(subscription, payload);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    res.status(201).json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
  }
});

app.get('/api/proxy/:userId/:id', async (req: any, res: any) => {
  const { id, userId } = req.params;

  if (!userId || !id) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω userId –∏–ª–∏ id –∑–∞–∫–∞–∑–∞' });
  }  

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ELMA
    const response = await axios.get(`https://portal.dev.lead.aero/api/feed/targets/work_orders/OrdersNew/${id}/messages`, {
      params: {
        limit: 100000,
        offset: 0,
      },
      headers: {
        'Authorization': token,
        'Accept': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
        'Origin': 'https://portal.dev.lead.aero',
        'Referer': 'https://portal.dev.lead.aero/'
      }
    });

    console.log(response.statusText);

    if (response.statusText !== 'OK') {
      return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ELMA' });
    }

    const elmaData = response.data;
    const elmaMessages = Array.isArray(elmaData) ? elmaData : elmaData?.result || [];

    // console.log(userId);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = loadUserData(userId);
    const savedMessages = userData?.messages || [];

    // –í—ã—è–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ ID –∏–ª–∏ —Ç–µ–∫—Å—Ç—É)
    const savedIds = new Set(savedMessages.map((msg: any) => msg.__id));
    const newMessages = elmaMessages.filter((msg: any) => !savedIds.has(msg.__id));

    if (newMessages.length > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      userData.messages.push(...newMessages);
      if (userId && userData) {
        saveUserData(userId, userData);
      }
    }

    res.json({
      messages: elmaMessages,
      newMessages
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' });
  }
});

app.post('/api/proxy/send/:id', async (req, res) => {
  const { id } = req.params;
  const { userId, orderNumber, ...messagePayload } = req.body;

  try {
    const response = await fetch(`https://portal.dev.lead.aero/api/feed/targets/work_orders/OrdersNew/${id}/messages`, {
      method: 'PUT',
      headers: {
        'Authorization': token,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'Mozilla/5.0',
        'Origin': 'https://portal.dev.lead.aero',
        'Referer': 'https://portal.dev.lead.aero/'
      },
      body: JSON.stringify(messagePayload)
    });

    const responseAllChannels = await fetch(`https://portal.dev.lead.aero/api/feed/channels/`, {
      method: 'GET',
      headers: {
        'Authorization': token,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'Mozilla/5.0',
        'Origin': 'https://portal.dev.lead.aero',
        'Referer': 'https://portal.dev.lead.aero/messages/channels',
        'X-Requested-With': 'XMLHttpRequest',
        'X-Timezone': 'Europe/Moscow',
        'X-EQL-Timezone': 'Europe/Moscow',
        'X-Language': 'ru-RU'
      }
    });

    const AllChannels = await responseAllChannels.json()

    const isInChannels = AllChannels.find((channel: any) => channel?.name?.split('‚Ññ')[1]?.trim() === orderNumber);

    let channelId = isInChannels?.__id ?? '';

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –æ–±—â–µ–π elma
    if (!isInChannels) {
      const response2 = await fetch(`https://portal.dev.lead.aero/api/feed/channels/`, {
        method: 'PUT',
        headers: {
          'Authorization': token,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Mozilla/5.0',
          'Origin': 'https://portal.dev.lead.aero',
          'Referer': 'https://portal.dev.lead.aero/messages/channels',
          'X-Requested-With': 'XMLHttpRequest',
          'X-Timezone': 'Europe/Moscow',
          'X-EQL-Timezone': 'Europe/Moscow',
          'X-Language': 'ru-RU'
        },
        body: JSON.stringify({
            "author": "c566297b-2f3c-40b5-a27e-7d9f30aae080",
            name: `–ó–∞–∫–∞–∑ ‚Ññ${orderNumber}`,
            members: [], // –∏–ª–∏ [userId], –µ—Å–ª–∏ –ø–æ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            accessRights: "author"
          })
      });
  
      const request2 = await response2?.json();
      channelId = request2.__id;

      // –ü—Ä–∏—Å–≤–æ–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
      const response3 = await fetch(`https://portal.dev.lead.aero/api/feed/channels/${channelId}/members`, {
        method: 'POST',
        headers: {
          'Authorization': token,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Mozilla/5.0',
          'Origin': 'https://portal.dev.lead.aero',
          'Referer': 'https://portal.dev.lead.aero/messages/channels',
          'X-Requested-With': 'XMLHttpRequest',
          'X-Timezone': 'Europe/Moscow',
          'X-EQL-Timezone': 'Europe/Moscow',
          'X-Language': 'ru-RU'
        },
        body: JSON.stringify([{
          id: "543e820c-e836-45f0-b177-057a584463b7", 
          type: "user", 
          accessRights: "author"
        }])
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∑–∞–∫–∞–∑–∞
    const responseChanelMessage = await fetch(`https://portal.dev.lead.aero/api/feed/messages`, {
      method: 'PUT',
      headers: {
        'Authorization': token,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'Mozilla/5.0',
        'Origin': 'https://portal.dev.lead.aero',
        'Referer': `https://portal.dev.lead.aero/channels/${channelId}`
      },
      body: JSON.stringify(
        {
          ...messagePayload,
          title: "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞",
          target: {
            id: channelId
          }
        })
    });


    console.log(await responseChanelMessage.json());
    // https://portal.dev.lead.aero/api/feed/channels/067e0ad3-e929-4f28-9ff7-9d2a89b5203a

    

    // body: JSON.stringify({
      // userId: '543e820c-e836-45f0-b177-057a584463b7',
      // body: `<p>${text}</p>`,
      // mentionIds: [],
      // files: []
  // })

    const text = await response.text();
    let result = null;

    if (text) {
      try {
        result = JSON.parse(text);
      } catch (e) {
        console.warn('–û—Ç–≤–µ—Ç –Ω–µ JSON, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç:', text);
      }
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    if (userId && result) {
      const userData = loadUserData(userId);

      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ result ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ messagePayload
      userData.messages.push(result);

      saveUserData(userId, userData);
    }

    res.status(response.status).json(result || { status: 'ok' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    if (!res.headersSent) {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  }
});

app.post('/api/save-subscription/:userId', (req: any, res: any) => {
  const { userId } = req.params;
  const subscription = req.body;

  if (!subscription || !subscription.endpoint) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' });
  }

  saveUserSubscription(userId, subscription);
  res.status(201).json({ success: true });
});

app.get('/api/user/:userId/orders', async (req: any, res: any) => {
  const { userId } = req.params;

  try {
    const localData = loadUserData(userId);

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã ‚Äî —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º

    // –ò–Ω–∞—á–µ –∏–¥–µ–º –≤ ELMA365
    const elmaResponse = await axios.post(
      'https://portal.dev.lead.aero/pub/v1/app/work_orders/OrdersNew/list',
      {
        active: true,
        fields: {
          "*": true
        },
        from: 394,
        size: 15
      },
      {
        params: {
          limit: 100000000,
          offset: 0,
        },
        headers: {
          'Authorization': 'Bearer a515732b-4549-4634-b626-ce4362fb10bc',
          'Content-Type': 'application/json'
        }
      }
    );
    

    if (localData?.orders?.length === elmaResponse.data?.result?.result?.length) {
      return res.json({result: {result: localData.orders, total: localData.orders.length}, error: '', success: true});
    }

    const fetchedOrders = elmaResponse.data || [];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    const newData = { orders: fetchedOrders, messages: localData.messages };
    saveUserData(userId, newData as UserData);

    res.json(fetchedOrders);
  } catch (err: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ ELMA365:', err.response?.data || err.message);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ ELMA365' });
  }
});


async function pollNewMessages() {
  try {
    const userFiles = readdirSync(path.join(__dirname, 'data', 'user'));

  for (const file of userFiles) {
    const userId = file.replace('.json', '');
    const user = loadUserData(userId);
    if (!user || !user.messages) continue;

    const subscriptions = getUserSubscriptions(userId);

    const orderId = '0';

    for (const currentMessage of user.messages) {
      if (!currentMessage.__id) continue;
      try {
        const response = await axios.get(
          `https://portal.dev.lead.aero/api/feed/targets/work_orders/OrdersNew/${currentMessage.target?.id}/messages`,
          {
            params: {
              limit: 100000,
              offset: 0,
            },
            headers: {
              'Authorization': token,
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'User-Agent': 'Mozilla/5.0',
              'Origin': 'https://portal.dev.lead.aero',
              'Referer': 'https://portal.dev.lead.aero/'
            },
          }
        );
  
        const { result: messages} = response.data;
        if (!Array.isArray(messages) || messages.length === 0) continue;

        const allMessages = user.messages.filter((msg: any) => msg.target?.id === currentMessage.target?.id)

        if (allMessages.length < messages?.length) console.log(true);
        console.log(allMessages.length, messages?.length, currentMessage.target?.id);
  
        while (allMessages.length < messages?.length) {
          const newMessage = messages[allMessages.length]

          // console.log(newMessage);
  
          const payload = JSON.stringify({
            title: `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ${orderId ?? '0'}`,
            body: newMessage.body || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          });
  
          allMessages.push(newMessage);
          user.messages.push(newMessage);
  
          for (const sub of subscriptions) {
            try {
              await webpush.sendNotification(sub, payload);
            } catch (err: any) {
              console.warn('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—à–∞:', err.statusCode, err.body);
          
              if (err.statusCode === 410 || err.statusCode === 404) {
                console.log('üóë –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É...');
                // –£–¥–∞–ª–∏–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Ñ–∞–π–ª–∞
                const userSubscriptions = getUserSubscriptions(userId);
                const updatedSubs = userSubscriptions.filter(s => s.endpoint !== sub.endpoint);
                saveUserSubscription(userId, updatedSubs);
              }
            }
          }
        }
      } catch (e) {
        console.warn(`‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É ${orderId}`, e);
      }
    } 
    

    saveUserData(userId, user);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ:", error);
  } finally {
    // –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    setTimeout(pollNewMessages, 5000);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
// pollNewMessages();

const PORT = 3001;

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
